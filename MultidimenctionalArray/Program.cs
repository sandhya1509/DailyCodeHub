using System;
using System.Collections.Generic;
namespace MultidimenctionalArray
{
    class Program
    {
        static void Main(string[] args)
        {
            List<List<int>> A = new List<List<int>>()
            {
                #region data
                /*
                new List<int>(){ 1,2,3},
                new List<int>(){4,5,6 },
                new List<int>(){7,8,9 }*/
                /*

                new List<int>(){ 1, 2, 5, 7, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 27, 28, 29, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 50, 53},//Failed with runtime error
                new List<int>(){ 4, 6, 8, 10, 11, 13, 15, 18, 20, 21, 24, 25, 27, 30, 33, 36, 37, 40, 41, 42, 43, 44, 45, 48, 51, 54, 55, 56, 59, 62, 63, 65, 66},
                new List<int>(){ 7, 8, 11, 14, 17, 19, 22, 25, 27, 29, 30, 31, 34, 36, 37, 40, 42, 44, 45, 48, 49, 52, 55, 58, 60, 63, 66, 69, 70, 73, 76, 78, 79},
                new List<int>(){ 10, 11, 13, 17, 19, 22, 23, 26, 30, 31, 33, 36, 38, 41, 43, 45, 46, 48, 49, 50, 53, 55, 58, 59, 63, 66, 69, 70, 71, 75, 77, 80, 82},
                new List<int>(){ 13, 16, 17, 20, 22, 23, 26, 27, 31, 32, 36, 39, 41, 44, 47, 50, 52, 55, 58, 61, 63, 66, 68, 71, 72, 75, 77, 78, 80, 81, 82, 84, 85},
                new List<int>(){ 15, 19, 22, 25, 28, 29, 31, 34, 36, 38, 41, 42, 44, 45, 50, 51, 55, 58, 60, 64, 66, 69, 72, 75, 77, 80, 83, 84, 86, 89, 90, 93, 96},
                new List<int>(){ 16, 21, 23, 28, 29, 32, 34, 36, 38, 39, 42, 45, 47, 48, 52, 54, 57, 60, 62, 66, 69, 72, 74, 76, 79, 81, 84, 86, 88, 91, 93, 96, 99},
                new List<int>(){ 19, 22, 25, 31, 33, 36, 38, 39, 41, 43, 44, 48, 50, 52, 54, 55, 58, 62, 64, 67, 71, 75, 76, 77, 81, 83, 86, 87, 90, 93, 95, 97, 100},
                new List<int>(){ 21, 24, 26, 32, 36, 37, 41, 43, 46, 47, 49, 52, 54, 56, 58, 60, 63, 64, 66, 68, 72, 76, 79, 82, 85, 87, 88, 91, 92, 95, 98, 100, 102},
                new List<int>(){ 24, 25, 27, 33, 39, 42, 44, 45, 48, 50, 51, 53, 56, 57, 61, 62, 65, 68, 69, 70, 74, 79, 81, 83, 87, 90, 92, 94, 96, 99, 100, 103, 106},
                new List<int>(){ 25, 28, 31, 35, 40, 43, 46, 49, 50, 52, 55, 56, 58, 60, 63, 65, 68, 71, 74, 76, 79, 81, 82, 85, 89, 92, 93, 96, 99, 100, 103, 104, 107},
                new List<int>(){ 26, 31, 32, 38, 43, 46, 48, 52, 55, 57, 60, 62, 65, 66, 68, 69, 70, 72, 77, 78, 80, 83, 86, 88, 91, 94, 95, 98, 102, 103, 104, 107, 110},
                new List<int>(){ 29, 33, 36, 39, 45, 48, 49, 53, 56, 59, 63, 65, 66, 67, 70, 71, 74, 75, 80, 81, 82, 85, 89, 90, 93, 96, 99, 101, 105, 107, 110, 112, 114},
                new List<int>(){ 30, 34, 39, 40, 48, 51, 52, 56, 58, 61, 64, 68, 71, 73, 76, 79, 81, 84, 86, 87, 90, 93, 94, 96, 99, 101, 103, 104, 108, 109, 112, 113, 115},
                new List<int>(){ 32, 35, 40, 42, 50, 54, 55, 57, 61, 63, 65, 71, 74, 76, 79, 82, 83, 86, 87, 89, 91, 94, 95, 99, 102, 103, 106, 107, 111, 114, 115, 116, 117},
                new List<int>(){ 35, 38, 42, 44, 51, 57, 59, 60, 64, 66, 67, 72, 76, 78, 81, 85, 86, 88, 89, 92, 93, 97, 100, 102, 103, 104, 107, 110, 114, 116, 119, 122, 123},
                new List<int>(){ 36, 39, 43, 47, 53, 58, 61, 63, 66, 69, 71, 73, 77, 80, 82, 87, 88, 89, 90, 94, 95, 98, 101, 103, 104, 105, 109, 113, 117, 120, 121, 125, 127},
                new List<int>(){ 37, 42, 45, 50, 55, 59, 64, 65, 69, 70, 72, 75, 79, 82, 84, 89, 90, 92, 93, 96, 97, 99, 104, 107, 109, 110, 112, 116, 119, 123, 125, 126, 128},
                new List<int>(){ 38, 45, 47, 53, 57, 61, 67, 69, 72, 75, 76, 79, 80, 84, 85, 92, 93, 96, 99, 102, 103, 105, 107, 110, 111, 113, 115, 118, 121, 126, 129, 130, 133},
                new List<int>(){ 39, 47, 49, 56, 60, 64, 68, 70, 74, 77, 80, 83, 85, 87, 89, 94, 96, 98, 102, 105, 108, 110, 113, 114, 117, 119, 121, 123, 124, 129, 130, 131, 135},
                new List<int>(){ 40, 50, 53, 57, 63, 65, 70, 72, 76, 79, 82, 86, 87, 90, 93, 95, 98, 99, 105, 106, 111, 112, 115, 117, 120, 122, 125, 128, 131, 132, 133, 136, 138},
                new List<int>(){ 41, 51, 56, 58, 65, 68, 72, 73, 77, 80, 85, 87, 90, 93, 95, 98, 101, 103, 106, 109, 114, 115, 116, 118, 123, 126, 127, 129, 134, 136, 137, 140, 141},
                new List<int>(){ 44, 53, 59, 62, 67, 69, 75, 76, 79, 81, 88, 91, 92, 95, 96, 99, 104, 106, 109, 110, 116, 118, 120, 123, 126, 127, 129, 132, 135, 139, 140, 141, 143},
                new List<int>(){ 47, 54, 60, 63, 70, 72, 76, 77, 81, 83, 91, 93, 95, 97, 99, 102, 105, 108, 110, 113, 118, 121, 123, 126, 129, 130, 132, 134, 137, 142, 144, 147, 150},
                new List<int>(){ 50, 57, 61, 65, 73, 74, 77, 78, 83, 86, 92, 95, 96, 99, 101, 103, 107, 111, 113, 114, 120, 122, 126, 128, 132, 134, 136, 139, 141, 145, 147, 149, 151},
                new List<int>(){ 52, 58, 62, 67, 76, 77, 79, 81, 86, 88, 94, 96, 98, 102, 104, 105, 109, 112, 116, 118, 123, 126, 128, 130, 133, 136, 138, 141, 142, 146, 148, 152, 153},
                new List<int>(){ 55, 61, 63, 69, 78, 81, 84, 86, 88, 90, 97, 99, 101, 104, 105, 106, 112, 114, 119, 122, 125, 128, 130, 132, 136, 138, 139, 142, 143, 147, 149, 153, 155},
                new List<int>(){ 58, 62, 64, 71, 79, 82, 87, 89, 90, 93, 99, 102, 104, 107, 109, 112, 115, 118, 120, 124, 128, 129, 131, 133, 138, 141, 144, 147, 149, 151, 153, 154, 156},
                new List<int>(){ 60, 65, 68, 72, 80, 84, 88, 92, 94, 96, 101, 104, 105, 109, 112, 114, 117, 119, 123, 126, 130, 131, 132, 135, 140, 144, 147, 148, 152, 154, 156, 159, 162},
                new List<int>(){ 62, 66, 71, 74, 82, 87, 89, 93, 97, 100, 102, 107, 108, 111, 114, 116, 118, 120, 124, 129, 131, 132, 134, 138, 143, 146, 149, 151, 155, 157, 158, 161, 164},
                new List<int>(){ 64, 69, 72, 77, 84, 90, 92, 94, 100, 103, 106, 109, 111, 114, 116, 117, 119, 121, 125, 131, 134, 137, 139, 141, 145, 149, 151, 152, 157, 159, 162, 163, 165},
                new List<int>(){ 65, 70, 75, 80, 85, 93, 95, 98, 101, 105, 108, 112, 115, 116, 117, 120, 121, 124, 126, 132, 137, 140, 141, 144, 147, 152, 153, 156, 159, 161, 163, 164, 168},
                new List<int>(){ 66, 72, 76, 82, 87, 94, 96, 101, 103, 108, 110, 113, 117, 118, 120, 121, 123, 125, 128, 134, 139, 141, 143, 147, 148, 155, 158, 160, 161, 163, 164, 166, 171},
                new List<int>(){ 68, 75, 77, 85, 90, 97, 98, 104, 107, 109, 112, 114, 120, 121, 122, 124, 125, 128, 129, 135, 142, 145, 146, 148, 150, 157, 161, 163, 165, 168, 171, 172, 174},
                new List<int>(){ 71, 77, 79, 86, 91, 99, 101, 107, 108, 112, 113, 116, 122, 125, 127, 130, 132, 134, 135, 138, 144, 147, 149, 151, 153, 158, 162, 164, 167, 170, 174, 177, 178},
                new List<int>(){ 74, 78, 80, 89, 94, 101, 104, 110, 112, 115, 117, 120, 125, 127, 130, 131, 135, 138, 139, 140, 145, 149, 152, 155, 157, 160, 165, 166, 168, 173, 176, 178, 181},
                new List<int>(){ 75, 81, 83, 92, 97, 102, 105, 112, 113, 118, 121, 123, 127, 130, 133, 134, 136, 139, 141, 142, 146, 151, 154, 157, 159, 162, 167, 168, 171, 174, 179, 181, 183}*/

                /*
                                new List<int>(){ -100, -99, -97, -95, -93, -91, -89, -86, -85, -82, -80, -79, -78, -76, -73, -72, -70, -67, -66, -63, -62, -60, -58, -57, -56, -53, -51, -48, -47, -44, -43, -40, -39, -38, -36, -34, -31, -30, -29, -26, -23, -21, -19, -16, -13, -11, -10, -8, -6, -5, -2, -1, 2, 3, 6, 9, 11, 13, 16, 19, 22, 25, 27, 28, 31, 34, 35, 38, 39, 41, 42, 45, 47, 49, 50, 51, 54, 56, 59, 61, 62, 63, 66, 67, 70, 73, 74, 75, 78, 80, 81, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 101, 103, 105, 108, 111, 113, 116, 119, 121, 123, 125, 127, 128, 130, 132, 135, 138, 140, 142, 144, 145, 148, 151, 153, 156, 159, 160, 162, 163, 166, 167, 169, 171, 173, 174, 175, 177, 180, 182, 183, 185, 188, 189, 192, 193, 194, 197, 199, 200, 202, 204, 205, 207, 209, 210, 212, 214, 216, 218, 219, 220, 222, 224, 227, 230, 232, 234, 236, 239, 241, 244, 245, 246, 248},
                                new List<int>(){ -99, -96, -93, -91, -90, -87, -86, -85, -83, -79, -78, -75, -73, -70, -69, -67, -64, -61, -59, -56, -55, -52, -50, -48, -46, -45, -43, -42, -41, -38, -37, -36, -34, -31, -30, -29, -26, -25, -23, -22, -20, -17, -16, -14, -12, -9, -6, -3, 0, 3, 5, 8, 9, 12, 14, 15, 18, 21, 23, 26, 29, 31, 34, 36, 39, 41, 44, 45, 48, 49, 51, 53, 54, 57, 60, 63, 64, 65, 68, 71, 73, 74, 75, 76, 79, 80, 83, 86, 87, 89, 91, 92, 94, 95, 96, 98, 101, 104, 105, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 123, 124, 126, 128, 130, 132, 133, 136, 137, 139, 141, 143, 146, 149, 152, 153, 156, 159, 162, 165, 168, 171, 172, 174, 175, 178, 180, 183, 185, 186, 187, 189, 191, 193, 196, 197, 199, 202, 203, 205, 207, 208, 209, 211, 214, 215, 216, 217, 218, 219, 221, 223, 226, 227, 229, 231, 233, 236, 239, 240, 243, 245, 246, 247, 249, 252, 254},
                                new List<int>(){ -98, -94, -92, -88, -86, -84, -81, -80, -77, -74, -73, -71, -70, -69, -66, -63, -62, -58, -55, -52, -49, -48, -46, -45, -43, -42, -41, -40, -39, -37, -34, -33, -32, -28, -26, -23, -21, -18, -16, -13, -12, -11, -8, -5, -2, 0, 2, 3, 4, 5, 8, 10, 12, 14, 15, 16, 19, 22, 26, 27, 32, 33, 37, 39, 42, 45, 46, 47, 51, 52, 54, 56, 58, 61, 63, 65, 66, 67, 69, 74, 75, 78, 81, 84, 86, 89, 90, 93, 96, 99, 102, 105, 106, 108, 110, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 128, 129, 131, 133, 134, 136, 139, 141, 143, 144, 145, 146, 147, 149, 151, 153, 155, 158, 159, 160, 163, 166, 167, 170, 174, 177, 180, 182, 183, 185, 186, 189, 190, 191, 194, 197, 200, 202, 203, 206, 209, 210, 211, 213, 215, 216, 219, 220, 222, 225, 227, 229, 232, 234, 235, 238, 241, 244, 247, 249, 250, 253, 254, 256, 259, 260, 261, 262, 265, 267},
                                new List<int>(){ -96, -91, -90, -86, -83, -81, -80, -78, -74, -72, -71, -68, -66, -65, -62, -60, -57, -54, -51, -48, -47, -46, -43, -42, -40, -39, -37, -35, -32, -30, -29, -26, -25, -22, -19, -18, -17, -16, -14, -12, -10, -8, -7, -3, 0, 2, 3, 5, 6, 9, 10, 13, 14, 17, 18, 19, 20, 24, 29, 32, 34, 37, 39, 41, 44, 48, 50, 51, 54, 57, 60, 62, 65, 67, 68, 69, 72, 73, 75, 77, 79, 81, 83, 85, 88, 90, 91, 94, 97, 102, 104, 107, 110, 113, 115, 118, 120, 121, 124, 126, 129, 130, 132, 135, 137, 138, 141, 142, 143, 144, 146, 148, 150, 152, 154, 156, 157, 160, 163, 166, 169, 171, 174, 175, 178, 181, 182, 184, 187, 188, 191, 192, 194, 196, 198, 199, 200, 202, 204, 207, 210, 212, 215, 216, 218, 220, 222, 224, 226, 229, 232, 233, 234, 237, 240, 242, 245, 247, 250, 251, 252, 255, 258, 261, 262, 265, 266, 269, 272, 274, 277, 280, 283, 284, 286, 289},
                                new List<int>(){ -95, -88, -85, -82, -80, -77, -76, -75, -71, -70, -69, -65, -62, -59, -57, -54, -53, -52, -50, -47, -46, -43, -42, -39, -37, -34, -33, -31, -29, -28, -25, -22, -19, -17, -15, -13, -11, -8, -6, -3, -1, 0, 3, 5, 6, 7, 10, 11, 14, 16, 18, 21, 23, 26, 29, 31, 34, 37, 38, 39, 40, 42, 44, 47, 49, 51, 53, 55, 58, 61, 63, 65, 67, 69, 70, 72, 74, 77, 79, 81, 83, 86, 89, 92, 95, 98, 100, 101, 104, 105, 106, 108, 113, 116, 119, 120, 121, 124, 126, 129, 132, 133, 136, 138, 139, 142, 144, 145, 147, 148, 149, 150, 153, 154, 155, 157, 159, 161, 164, 168, 172, 175, 178, 179, 181, 182, 184, 185, 189, 191, 193, 195, 197, 199, 202, 205, 206, 208, 209, 210, 211, 213, 216, 217, 221, 223, 224, 226, 228, 231, 235, 236, 237, 238, 242, 243, 246, 250, 252, 253, 254, 256, 259, 264, 267, 268, 269, 271, 273, 275, 279, 281, 286, 289, 290, 292},
                                new List<int>(){ -92, -87, -84, -81, -79, -76, -75, -74, -70, -69, -67, -62, -59, -58, -54, -52, -50, -49, -48, -45, -44, -42, -40, -36, -33, -32, -29, -26, -24, -21, -19, -16, -13, -12, -11, -10, -7, -4, -2, 1, 4, 7, 10, 11, 12, 14, 17, 18, 19, 20, 21, 22, 24, 28, 31, 32, 36, 40, 41, 43, 44, 46, 47, 48, 52, 53, 54, 58, 60, 63, 65, 67, 68, 72, 74, 75, 76, 78, 81, 83, 86, 87, 92, 94, 96, 100, 101, 104, 107, 110, 112, 115, 116, 117, 121, 122, 123, 127, 130, 131, 135, 136, 139, 141, 142, 144, 145, 147, 148, 150, 153, 156, 158, 161, 163, 165, 166, 168, 169, 171, 173, 177, 179, 182, 183, 186, 188, 189, 192, 195, 198, 200, 202, 205, 208, 209, 212, 214, 217, 218, 221, 222, 224, 227, 228, 229, 230, 233, 236, 237, 239, 242, 245, 246, 248, 251, 253, 255, 258, 259, 260, 263, 266, 268, 270, 271, 272, 273, 274, 276, 281, 283, 288, 292, 295, 296},
                                new List<int>(){ -91, -86, -83, -78, -75, -74, -72, -70, -67, -65, -62, -59, -57, -54, -52, -50, -48, -45, -43, -40, -37, -34, -32, -29, -28, -27, -24, -23, -20, -17, -16, -13, -12, -10, -9, -6, -5, -1, 2, 3, 7, 8, 11, 12, 13, 15, 19, 22, 25, 28, 29, 31, 34, 37, 38, 39, 42, 45, 46, 47, 49, 50, 51, 53, 55, 58, 59, 61, 63, 66, 69, 71, 73, 75, 77, 78, 80, 82, 85, 86, 88, 91, 93, 95, 99, 102, 104, 105, 108, 113, 116, 118, 119, 120, 122, 123, 124, 130, 133, 135, 138, 139, 141, 144, 145, 147, 149, 150, 151, 154, 155, 159, 161, 162, 166, 167, 169, 171, 174, 175, 178, 181, 184, 187, 189, 192, 194, 197, 198, 199, 201, 203, 206, 209, 212, 214, 216, 219, 220, 221, 223, 226, 227, 230, 231, 234, 236, 237, 239, 242, 244, 247, 248, 250, 251, 252, 255, 256, 261, 262, 265, 267, 268, 269, 271, 274, 276, 279, 282, 283, 285, 287, 291, 293, 298, 300},
                                new List<int>(){ -89, -83, -82, -76, -74, -73, -69, -66, -64, -63, -60, -57, -54, -51, -49, -46, -44, -42, -40, -37, -36, -32, -29, -27, -24, -22, -19, -17, -14, -12, -11, -9, -6, -5, -2, -1, 2, 3, 6, 7, 9, 10, 14, 16, 19, 20, 21, 24, 26, 29, 31, 33, 37, 40, 42, 43, 45, 46, 48, 51, 54, 57, 58, 60, 63, 64, 66, 68, 71, 74, 77, 79, 80, 83, 85, 87, 90, 93, 95, 97, 99, 102, 104, 105, 107, 110, 113, 116, 117, 120, 121, 123, 125, 128, 131, 132, 134, 135, 137, 139, 141, 144, 147, 150, 151, 152, 155, 158, 161, 163, 165, 168, 169, 171, 172, 173, 176, 177, 179, 181, 183, 186, 189, 192, 194, 195, 197, 199, 202, 203, 204, 205, 207, 210, 213, 216, 218, 220, 223, 226, 227, 229, 231, 234, 237, 238, 241, 243, 245, 247, 248, 249, 250, 253, 255, 257, 260, 261, 262, 263, 266, 269, 272, 273, 275, 276, 279, 282, 283, 285, 286, 290, 292, 296, 301, 303},
                                new List<int>(){ -86, -80, -78, -73, -70, -69, -66, -63, -62, -61, -59, -56, -51, -49, -46, -45, -42, -40, -37, -36, -33, -31, -27, -26, -21, -20, -18, -15, -11, -8, -6, -4, -1, 0, 2, 5, 6, 9, 12, 14, 15, 16, 18, 19, 20, 21, 24, 25, 29, 31, 32, 36, 40, 42, 45, 48, 51, 52, 55, 56, 59, 60, 62, 65, 67, 70, 72, 75, 78, 80, 82, 85, 86, 89, 90, 93, 94, 96, 98, 101, 104, 105, 106, 109, 111, 114, 115, 117, 118, 121, 124, 127, 129, 131, 132, 133, 137, 139, 142, 145, 147, 150, 152, 154, 155, 156, 159, 160, 162, 164, 168, 169, 171, 174, 177, 179, 182, 185, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 203, 205, 207, 209, 211, 213, 214, 218, 220, 223, 224, 229, 232, 234, 235, 237, 238, 241, 242, 244, 247, 249, 251, 253, 255, 258, 261, 263, 265, 266, 267, 268, 269, 271, 274, 275, 277, 278, 280, 283, 286, 289, 291, 292, 293, 298, 304, 307},
                                new List<int>(){ -84, -78, -76, -72, -69, -67, -64, -62, -59, -57, -56, -53, -49, -46, -45, -44, -39, -38, -35, -33, -31, -29, -26, -24, -20, -18, -17, -14, -8, -7, -3, -2, 2, 5, 6, 9, 12, 14, 17, 18, 21, 24, 27, 30, 32, 35, 36, 37, 40, 41, 44, 47, 50, 51, 54, 57, 60, 61, 62, 64, 67, 70, 72, 75, 77, 80, 82, 83, 86, 87, 90, 91, 93, 94, 97, 99, 101, 103, 104, 107, 109, 112, 115, 116, 118, 121, 123, 126, 129, 132, 134, 137, 139, 142, 143, 144, 145, 146, 147, 149, 151, 152, 154, 156, 158, 159, 161, 162, 164, 165, 171, 172, 174, 175, 179, 182, 183, 188, 190, 191, 193, 196, 198, 199, 202, 203, 206, 207, 208, 209, 210, 213, 216, 217, 220, 221, 224, 225, 227, 231, 234, 235, 237, 238, 240, 243, 245, 248, 251, 253, 256, 258, 259, 260, 263, 266, 268, 270, 272, 275, 276, 278, 279, 281, 282, 284, 285, 287, 288, 292, 293, 296, 297, 301, 305, 309},
                                new List<int>(){ -83, -77, -75, -70, -66, -65, -61, -60, -56, -53, -51, -49, -46, -43, -41, -40, -36, -34, -31, -30, -28, -27, -23, -21, -18, -16, -14, -11, -5, -2, -1, 1, 4, 7, 8, 10, 15, 18, 19, 21, 22, 25, 30, 33, 34, 37, 39, 41, 42, 43, 47, 50, 51, 53, 55, 60, 62, 65, 68, 69, 70, 72, 73, 78, 81, 82, 83, 84, 89, 92, 93, 96, 99, 100, 102, 104, 106, 107, 109, 110, 113, 116, 117, 119, 122, 124, 127, 128, 132, 133, 136, 140, 141, 145, 148, 151, 152, 153, 156, 158, 161, 162, 163, 165, 167, 170, 171, 174, 175, 178, 179, 181, 182, 183, 184, 187, 188, 189, 193, 195, 198, 199, 201, 203, 204, 205, 208, 210, 213, 215, 218, 221, 224, 225, 228, 229, 230, 233, 234, 237, 238, 239, 242, 244, 245, 247, 248, 249, 252, 255, 259, 262, 264, 266, 267, 269, 271, 274, 277, 278, 280, 283, 285, 288, 291, 294, 295, 298, 300, 301, 302, 303, 304, 306, 308, 310},
                                new List<int>(){ -80, -74, -71, -67, -65, -62, -58, -55, -53, -51, -49, -46, -45, -41, -39, -38, -34, -32, -29, -27, -26, -24, -20, -19, -17, -14, -11, -10, -4, -1, 0, 4, 6, 8, 9, 11, 18, 21, 24, 25, 28, 29, 31, 34, 37, 39, 42, 44, 47, 50, 52, 53, 56, 59, 62, 64, 67, 69, 70, 72, 75, 77, 79, 81, 82, 84, 85, 86, 92, 93, 95, 98, 102, 104, 106, 107, 108, 110, 112, 113, 115, 117, 118, 120, 124, 127, 129, 131, 133, 134, 139, 143, 144, 147, 150, 153, 154, 156, 159, 161, 164, 165, 167, 169, 170, 172, 173, 176, 179, 181, 182, 183, 185, 187, 188, 191, 193, 195, 196, 197, 200, 201, 202, 206, 207, 209, 210, 211, 214, 218, 220, 222, 227, 228, 230, 232, 233, 234, 236, 239, 242, 243, 244, 245, 248, 250, 253, 256, 257, 258, 261, 263, 265, 268, 271, 274, 275, 278, 279, 280, 283, 286, 287, 289, 294, 295, 296, 299, 302, 305, 307, 308, 311, 313, 314, 315},
                                new List<int>(){ -79, -72, -70, -65, -63, -59, -55, -54, -52, -48, -46, -45, -44, -39, -37, -34, -33, -31, -27, -26, -25, -22, -19, -18, -16, -11, -10, -7, -2, 1, 2, 6, 8, 10, 11, 14, 20, 24, 25, 28, 29, 31, 33, 35, 40, 41, 45, 48, 51, 52, 54, 56, 57, 61, 65, 68, 70, 73, 75, 77, 79, 80, 82, 83, 85, 86, 88, 89, 93, 95, 98, 99, 104, 107, 108, 111, 114, 115, 117, 118, 119, 122, 124, 127, 128, 129, 130, 132, 135, 137, 140, 146, 147, 149, 151, 156, 159, 160, 161, 164, 165, 168, 171, 172, 175, 178, 179, 180, 182, 184, 185, 188, 190, 193, 195, 198, 200, 203, 205, 206, 209, 211, 212, 215, 218, 219, 221, 222, 225, 227, 229, 231, 234, 236, 237, 240, 242, 245, 248, 249, 252, 253, 254, 257, 259, 262, 265, 268, 269, 272, 275, 278, 281, 282, 284, 287, 289, 290, 293, 296, 298, 299, 300, 302, 304, 307, 308, 311, 314, 317, 319, 322, 323, 325, 326, 328},
                                new List<int>(){ -78, -71, -69, -63, -60, -56, -53, -50, -47, -44, -43, -41, -39, -36, -33, -31, -28, -25, -23, -21, -18, -16, -13, -11, -10, -9, -8, -6, 1, 2, 5, 9, 11, 12, 14, 15, 22, 27, 30, 32, 34, 37, 39, 42, 44, 46, 49, 50, 52, 53, 55, 57, 59, 62, 68, 71, 72, 74, 78, 80, 83, 85, 88, 90, 92, 94, 96, 98, 99, 102, 105, 107, 110, 112, 114, 117, 120, 122, 125, 126, 127, 129, 132, 133, 134, 136, 139, 141, 143, 145, 148, 151, 152, 155, 157, 160, 162, 165, 168, 169, 170, 171, 174, 176, 179, 181, 183, 186, 189, 192, 195, 196, 199, 202, 205, 208, 210, 211, 212, 215, 216, 219, 221, 224, 225, 227, 230, 231, 233, 236, 237, 239, 242, 244, 245, 248, 250, 252, 253, 256, 259, 260, 263, 264, 267, 269, 270, 272, 273, 275, 278, 280, 282, 284, 286, 288, 291, 292, 294, 299, 302, 305, 307, 309, 310, 311, 314, 317, 319, 320, 322, 324, 325, 328, 331, 333},
                                new List<int>(){ -75, -69, -68, -60, -59, -53, -50, -47, -44, -43, -41, -40, -36, -34, -30, -29, -25, -24, -22, -20, -15, -12, -10, -8, -5, -4, -3, -1, 2, 4, 8, 10, 14, 16, 19, 20, 23, 30, 32, 34, 35, 40, 42, 45, 47, 48, 51, 53, 56, 58, 60, 61, 63, 64, 69, 72, 73, 76, 81, 82, 85, 88, 90, 91, 94, 96, 97, 101, 103, 104, 108, 110, 112, 115, 117, 120, 121, 124, 127, 130, 131, 132, 135, 138, 139, 140, 141, 142, 144, 147, 150, 154, 157, 159, 162, 164, 165, 168, 169, 172, 173, 176, 178, 179, 182, 183, 186, 187, 190, 194, 198, 200, 203, 205, 208, 210, 213, 214, 215, 217, 219, 220, 224, 225, 226, 229, 232, 234, 236, 239, 240, 242, 245, 247, 250, 253, 255, 258, 261, 262, 263, 264, 265, 267, 268, 270, 271, 275, 276, 279, 280, 282, 283, 285, 289, 290, 292, 295, 298, 300, 304, 307, 310, 311, 312, 315, 317, 320, 323, 326, 328, 329, 332, 333, 336, 338},
                                new List<int>(){ -73, -68, -66, -57, -55, -52, -48, -46, -43, -41, -39, -36, -35, -31, -28, -26, -22, -21, -20, -18, -14, -11, -7, -4, -3, -2, 1, 2, 5, 6, 9, 12, 15, 19, 20, 22, 25, 31, 34, 35, 36, 41, 45, 48, 51, 53, 56, 57, 58, 60, 61, 62, 64, 67, 71, 73, 74, 77, 83, 84, 88, 91, 92, 94, 95, 99}
                                */
                #endregion
                new List<int>(){ 0, 0, 0, 0, 0, 1, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 0, 0, 1, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 0, 0, 1, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 0, 0, 0, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 0, 0, 0, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 1, 1, 1, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 0, 1, 1, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 1, 1, 1, 1, 1, 1},
                new List<int>(){ 0, 0, 0, 1, 1, 1, 1, 1, 1},

            };
          //  A = generateMatrix(3);
          //  A = Pascal(5);
            int rowcount1 = rowmax1(A);
            int B = -100;
            int rowColmn = rowcolumSearch(A, B);
            A = diagonal(A);
        }

        #region Search in a row wise and column wise sorted matrix
        /*Problem Description

        Given a matrix of integers A of size N x M and an integer B.
        In the given matrix every row and column is sorted in increasing order. Find and return the position of B in the matrix in the given form:
        If Ai][j] = B then return (i * 1009 + j)
        If B is not present return -1.

        Note 1: Rows are numbered from top to bottom and columns are numbered from left to right.
        Note 2: If there are multiple B in A then return the smallest value of i*1009 +j such that A[i][j]=B.


        Problem Constraints
        1 <= N, M <= 1000
        -100000 <= A[i] <= 100000
        -100000 <= B <= 100000


        Input Format
        The first argument given is the integer matrix A.
        The second argument given is the integer B.


        Output Format
        Return the position of B and if it is not present in A return -1 instead.


        Example Input
        A = [ [1, 2, 3]
                  [4, 5, 6]
                  [7, 8, 9] ]
        B = 2

        Example Output
        1011

        Example Explanation
        A[1][2]= 2
        1*1009 + 2 =1011
        
         public int solve(List<List<int>> A, int B) {
        int ret = 100001;
            for (int i=0;i<A.Count;i++)
            {
                for (int j = 0; j < A[i].Count; j++)
                {
                    if (A[i][j] == B)
                    {
                        int cal = (i+1) * 1009 + (j+1);
                        ret = Math.Min(ret, cal);
                    }
                
                }
            }
            if (ret == 100001)
            { ret = -1; }

            return ret;*/
        #endregion
        //Brute Force
        public static int rowcolumSearch(List<List<int>> A, int B)
        {
            int ret = 100001;
            int n = A[0].Count;
            for (int i = 0; i < A.Count; i++)
            {
                if ((A[i][0] <= B) && (A[i][A[i].Count - 1] >= B))
                {

                    for (int j = 0; j < n; j++)
                    {
                        if (A[i][j] == B)
                        {
                            ret = (i + 1) * 1009 + (j + 1);// int cal = i * 1009 + j;//array values stars from 1
                            return ret;
                        }
                        else if (A[i][j] > B)
                        {
                            n = j;
                            break;
                        }


                    }
                }

            }
            if (ret == 100001)
            { ret = -1; }


            return ret;
            #region Java
            /* int ret = 100001;
            for (int i=0;i<A[0].length-1;i++)
            {
                for (int j = 0; j < A[i].length-1; j++)
                {
                    if (A[i][j] == B)
                    {
                        int cal = (i+1) * 1009 + (j+1);// int cal = i * 1009 + j;//array values stars from 1
                        ret = Math.min(ret, cal);
                    }
                
                }
            }
            if (ret == 100001)
            { ret = -1; }

            return ret;*/
            #endregion
        }

        #region Rotate Matrix
        /*
        Problem Description

        You are given a n x n 2D matrix A representing an image.

        Rotate the image by 90 degrees(clockwise).

        You need to do this in place.

        Note: If you end up using an additional array, you will only receive partial score.



        Problem Constraints
        1 <= n <= 1000



        Input Format
        First argument is a 2D matrix A of integers



        Output Format
        Return the 2D rotated matrix.



        Example Input
        Input 1:

         [
            [1, 2],
            [3, 4]
         ]
        Input 2:

         [
            [1]
         ]


        Example Output
        Output 1:

         [
            [3, 1],
            [4, 2]
         ]
        Output 2:

         [
            [1]
         ]


        Example Explanation
        Explanation 1:

         After rotating the matrix by 90 degree:
         1 goes to 2, 2 goes to 4
         4 goes to 3, 3 goes to 1
        Explanation 2:

         2D array remains the ssame as there is only element.*/
        #endregion
        public static void rotate(List<List<int>> a)
        {

        }
        #region Row with maximum number of ones
        /*   Problem Description

   Given a binary sorted matrix A of size N x N.Find the row with the maximum number of 1.

   NOTE:

   If two rows have the maximum number of 1 then return the row which has a lower index.
   Rows are numbered from top to bottom and columns are numbered from left to right.
   Assume 0-based indexing.
   Assume each row to be sorted by values.
   Expected time complexity is O(rows).


   Problem Constraints
   1 <= N <= 1000

   0 <= A[i] <= 1



   Input Format
   The only argument given is the integer matrix A.



   Output Format
   Return the row with the maximum number of 1.



   Example Input
   Input 1:

    A = [   [0, 1, 1]
            [0, 0, 1]
            [0, 1, 1]   ]
   Input 2:

    A = [   [0, 0, 0, 0]
           [0, 1, 1, 1]    ]


   Example Output
   Output 1:

    0
   Output 2:

    1


   Example Explanation
   Explanation 1:

    Row 0 has maximum number of 1s.
   Explanation 2:

    Row 1 has maximum number of 1s.*/

        #endregion
        #region Scalar ANS
        /*int n=a.size();
    int ans=0;
    int row =0,i,j;
    for (i=0,j=n-1; i<n&&j>0;i++){
        while (a[i][j]==1&&j>=0){
            row = i;
            j--;
        }
    }
    return row;*/
        #endregion
        public static int rowmax1(List<List<int>> A)
        {
            int _rowofmax1 = 0;
            int _rowof1 = 0;
            int rowindex = A.Count;
            int row;
            for (int col = 0; col < A.Count; col++)
            {
                for (row = 0; row < A.Count; row++)
                {
                    if (A[col][row] == 1)
                    {
                        _rowof1 = (A.Count - row);
                        row = A.Count;
                        if (_rowofmax1 < _rowof1)
                        {
                            rowindex = col;
                            rowindex = A.Count;

                        }
                        else if (_rowofmax1 == _rowof1)
                        {
                            rowindex = Math.Min(col, rowindex);

                        }

                        else if (_rowofmax1 == A.Count)
                        {
                            rowindex = col;
                            return rowindex;

                        }


                    }
                    _rowofmax1 = Math.Max(_rowofmax1, _rowof1); ; }

                rowindex = Math.Min(rowindex, col);

            }
            return rowindex;

        }
        #region Anti Diagonals
        /*
        Give a N* N square matrix, return an array of its anti-diagonals.Look at the example for more details.

        Example:

            Input:     

            1 2 3
            4 5 6
            7 8 9
                    Return the following :


                    [
                      [1],
                      [2, 4],
                      [3, 5, 7],
                      [6, 8],
                      [9]
            ]
            Input : 
            1 2
            3 4

            Return the following  : 

            [
              [1],
              [2, 3],
              [4]
            ]
        //Scalare
        class Solution {
    public:
    vector<vector<int> > diagonal(vector<vector<int> > Vec) {
        int N = Vec.size();
        if(N == 1)
                return Vec;
        
        vector<pair<int, int> > search_space;
        for(int i = 0; i < N; ++i) {
            search_space.push_back(make_pair(0, i));
        }
        for(int i = 1; i < N; ++i) {
            search_space.push_back(make_pair(i, N - 1));
        }

        vector<vector<int> > Ans;
        for(int i = 0; i < search_space.size(); ++i) {
            vector<int> Temp;
            int x = search_space[i].first;
            int y = search_space[i].second;
            while(x < N && y >= 0) {
                Temp.push_back(Vec[x][y]);
                x += 1;
                y -= 1;
            }
            Ans.push_back(Temp);
        }

        return Ans;
    }
};*/
        #endregion
        public static List<List<int>> diagonal(List<List<int>> A)
        {
            List<List<int>> diag = new List<List<int>>();

            int newlisy = 2 * A.Count - 1;
            for (int i = 0; i < newlisy; i++)
            {
                diag.Add(new List<int>());
            }
            for (int col = 0; col < A[0].Count; col++)
            {
                for (int row = 0; row < A[0].Count; row++)
                {
                    diag[col + row].Add(A[col][row]);
                }
            }
            #region Geekfor geek
            /*
                        int n = A.Count;
                        int N = 2 * n - 1;

                        List<List<int>> result = new List<List<int>>();

                        for (int i = 0; i < N; i++)
                        {
                            result.Add(new List<int>());
                        }

                        // Push each element in the result vector
                        for (int i = 0; i < n; i++)
                            for (int j = 0; j < n; j++)
                                result[i + j].Add(A[i][j]);

                        // Print the diagonals
                        for (int i = 0; i < result.Count; i++)
                        {
                            for (int j = 0; j < result[i].Count; j++)
                                Console.Write(result[i][j] + " ");
                            Console.WriteLine();
                        }
                    }

                    static void Main()
                    {
                        List<List<int>> A = new List<List<int>>();
                        A.Add(new List<int> { 1, 2, 3, 4 });
                        A.Add(new List<int> { 5, 6, 7, 8 });
                        A.Add(new List<int> { 9, 10, 11, 12 });
                        A.Add(new List<int> { 13, 14, 15, 16 });

                        // Function Call
                        diagonal(A);*/
            #endregion
            return diag;
        }

        #region Pascal Triangle
        /*
        Given numRows, generate the first numRows of Pascal's triangle.

Pascal's triangle : To generate A[C] in row R, sum up A'[C]
        and A'[C-1] from previous row R - 1.

Example:

Given numRows = 5,

Return

[
     [1],
     [1,1],
     [1,2,1],
     [1,3,3,1],
     [1,4,6,4,1]
]
        */
        #endregion

        public static List<List<int>> Pascal(int A)
        {
            List<List<int>> pascal = new List<List<int>>();

            for(int i=0;i<A;i++)
            {
                List<int> skeleton = new List<int>();
                for (int j = 0; j <= i; j++)
                {
                    skeleton.Add(1);
                }
                pascal.Add(skeleton);
            }

            for (int i = 2; i < A; i++)
            {
                for(int j=1;j<i;j++)
                {
                    #region old code
                    //int mid = i/2;
                    //if
                    //    (j == i || j == 0)
                    //        {
                    //            pascal[i].Add(1);
                    //}
                    //else if (j < mid )
                    //{
                    //    pascal[i].Add(j + 1);

                    //}
                    ////else if (j == mid && j != 0)
                    ////{
                    ////    pascal[i].Add(j);
                    ////}

                    //else
                    //{
                    //    pascal[i].Add(pascal[i-1][j-1]+ pascal[i - 1][j - 2]);

                    //}
                    #endregion

                    pascal[i][j] = pascal[i - 1][j-1] + pascal[i - 1][j];
                }
            }

                return pascal;

        }
        #region Spiral Order Matrix II
      /*  Problem Description
        Given an integer A, generate a square matrix filled with elements from 1 to A2 in spiral order.
        Problem Constraints
        1 <= A <= 1000
        Input Format
        First and only argument is integer A
        Output Format
        Return a 2-D matrix which consists of the elements in spiral order.
        Example Input
        Input 1:
        1
        Input 2:
        2
        Example Output
        Output 1:
        [ [1] ]
        Output 2:
        [ [1, 2], [4, 3] ]
        Example Explanation
        Explanation 1: 
        Only 1 is to be arranged.
        Explanation 2:
        1 --> 2
              |
              |
        4<--- 3 */
            #endregion
        public static List<List<int>> generateMatrix(int A)
        {
            List < List<int> > matrix = new List<List<int>>();
            for (int i = 0; i < A ; i++)
            { matrix.Add(new List<int>()); }

                for (int i = 0; i < A; i++)
                {
                for (int j = A-1; j >=0; j--)
                {
                    matrix[i].Add(matrix[i][j]);
                    //if ((i & 1) == 1)
                    //{
                    //    matrix[i].Add((matrix[i-1][A-1]* 2)-j);

                    //}

                    //else if(i>1)
                    //{
                    //    matrix[i].Add((matrix[i - 1][0] ) + j+1);

                    //}
                    //else 
                    //{
                    //    matrix[i].Add((i + j) + 1);
                    //}

                }
            }
            return matrix;

        }
    }

}